/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mil.nga.elevation.openapi.api;

import mil.nga.elevation.openapi.model.ElevationQuery;
import mil.nga.elevation.openapi.model.ElevationResponse;
import mil.nga.elevation.openapi.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-16T14:03:58.428Z[Etc/GMT-0]")

@Validated
@Api(value = "ElevationAt", description = "the ElevationAt API")
public interface ElevationAtApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Get the elevation at a particular point.", nickname = "getElevationAt", notes = "", response = ElevationResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An paged array of pets", response = ElevationResponse.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/ElevationAt",
        produces = { "application/json", "application/xml", "text/plain" }, 
        consumes = { "application/json", "application/xml", "text/plain" },
        method = RequestMethod.POST)
    default ResponseEntity<ElevationResponse> getElevationAt(@ApiParam(value = "Client specified geographic point." ,required=true )  @Valid @RequestBody ElevationQuery elevationQuery) {
    	getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{ }");
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    ApiUtil.setExampleResponse(request, "application/xml", "<null></null>");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
