/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mil.nga.elevation_services.api;

import mil.nga.elevation_services.model.CoordinateTypeArray;
import mil.nga.elevation_services.model.CoverageAvailableType;
import mil.nga.elevation_services.model.CoveragesAvailableType;
import mil.nga.elevation_services.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-29T11:50:00.502Z[Etc/GMT-0]")

@Validated
@Api(value = "CoverageAvailable", description = "the CoverageAvailable API")
public interface CoverageAvailableApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "End point used to determine what coverage types are available for a given point.", nickname = "getCoverageAvailableGET", notes = "", response = CoverageAvailableType.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Simple text based response.", response = CoverageAvailableType.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/CoverageAvailable",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> getCoverageAvailableGET(@NotNull @ApiParam(value = "Latitude value of a coordinate pair.  The coordinates can be specified in either DMS format or decimal degrees.", required = true) @Valid @RequestParam(value = "lat", required = true) String lat,@NotNull @ApiParam(value = "Longitude value of a coordinate pair.  The coordinates can be specified in either DMS format or decimal degrees.", required = true) @Valid @RequestParam(value = "lon", required = true) String lon) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"coordinate\" : {    \"lon\" : \"lon\",    \"lat\" : \"lat\"  },  \"coverages\" : [ \"coverages\", \"coverages\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "End point used to determine what coverage types are available for a given point.  The post version allows clients to specify more than one pont of interest.", nickname = "getCoverageAvailablePOST", notes = "", response = CoveragesAvailableType.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Simple text based response.", response = CoveragesAvailableType.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/CoverageAvailable",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> getCoverageAvailablePOST(@ApiParam(value = "Client specified list of geographic points.  The coordinates can be specified in either DMS format or decimal degrees." ,required=true )  @Valid @RequestBody CoordinateTypeArray coordinateTypeArray) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"coveragesAvailable\" : [ {    \"coordinate\" : {      \"lon\" : \"lon\",      \"lat\" : \"lat\"    },    \"coverages\" : [ \"coverages\", \"coverages\" ]  }, {    \"coordinate\" : {      \"lon\" : \"lon\",      \"lat\" : \"lat\"    },    \"coverages\" : [ \"coverages\", \"coverages\" ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
